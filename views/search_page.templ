package views

import (
	"strconv"
	"strings"

	"fxgn.dev/coursehunt/search"
	"encoding/json"
)

templ SearchPage(results []search.Course) {
	<form class="my-12" hx-get="/search" hx-push-url="true" hx-target="closest main">
		@searchBar()
		<details>
			<summary class="text-2xl mt-3">Filters</summary>
			@filters()
		</details>
	</form>
	<label class="block text-xl">
		Order by
		<select name="sort" class="px-5 py-1 rounded bg-highlightMed" hx-trigger="change" hx-get="/results" hx-target="#results" hx-vals={ resultsJson(results) }>
			<option value="default" selected>Relevance ↓</option>
			<option value="rating">Rating ↓</option>
			<option value="cheap">Price ↑</option>
			<option value="expensive">Price ↓</option>
			<option value="short">Length ↑</option>
			<option value="long">Length ↓</option>
		</select>
	</label>
	<div id="results">
		@ResultsList(results)
	</div>
}

templ ResultsList(results []search.Course) {
	for _, course := range results {
		@searchResult(course)
	}
}

func resultsJson(results []search.Course) string {
	data, _ := json.Marshal(map[string]interface{}{
		"result[]": results,
	})

	return string(data)
}

templ searchResult(course search.Course) {
	if course.Name != "" {
		<a class="block my-6 bg-surface rounded-xl border-2 border-highlightHigh p-5 hover:bg-highlightLow" href={ templ.URL(course.Url) }>
			<span class="text-xl font-bold">{ course.Name }</span> <mark class="bg-foam/20 rounded-lg p-1 text-foam">{ formatPrice(course.Price) }</mark>
			for _, extra := range course.Extra {
				switch extra {
					case search.Translated:
						<mark class="bg-rose/20 rounded-lg p-1 text-rose">Translated</mark>&nbsp;
					case search.Certificate:
						<mark class="bg-iris/20 rounded-lg p-1 text-iris">Certificate</mark>
					case search.PaidCertificate:
						<mark class="bg-iris/20 rounded-lg p-1 text-iris">Paid Certificate</mark>
				}
			}
			<br/>
			<span class="text-lg">{ tagString(course) }</span>
			<br/>
			<span class="text-muted">{ course.Description }</span>
		</a>
	}
}

func formatPrice(price float64) string {
	if price == 0 {
		return "Free"
	} else if price == -1 {
		return "Subscription"
	}
	return strconv.Itoa(int(price)) + "₽"
}

func tagString(course search.Course) string {
	var sb strings.Builder

	var prev bool

	if course.Author != "" {
		sb.WriteString("By ")
		sb.WriteString(course.Author)
		prev = true
	}

	if course.Rating > 0 {
		if prev {
			sb.WriteString(" | ")
		}
		sb.WriteString(strconv.FormatFloat(course.Rating, 'f', 1, 64))
		sb.WriteString(" ⭐")
		prev = true
	}

	if course.Hours > 0 {
		if prev {
			sb.WriteString(" | ")
		}
		sb.WriteString(duration(course.Hours))
	}

	return sb.String()
}

func duration(hours int) string {
	if hours >= 1000 {
		return "📆 " + strconv.Itoa(hours/1000) + " months"
	} else if hours == 1 {
		return "📆 1 hour"
	} else {
		return "📆 " + strconv.Itoa(hours) + " hours"
	}
}
